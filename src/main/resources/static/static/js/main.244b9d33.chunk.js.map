{"version":3,"sources":["components/Nav.js","components/AddTask.js","actions/backlogActions.js","actions/types.js","actions/projectActions.js","components/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/index.js","store.js","components/UpdateProject.js","components/ProjectItem.js","components/CreateProject.js","components/DashBoard.js","components/Task.js","components/Backlog.js","components/ProjectBoard.js","components/UpdateTask.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","style","fontSize","Component","AddTask","props","id","match","params","state","summary","acceptanceCriteria","status","priority","dueDate","projectIdentifier","errors","onChange","bind","onSubmit","nextProps","dataFormatValue","this","setState","e","target","name","value","preventDefault","newTask","addProjectTask","history","type","classnames","placeholder","connect","backlog_id","project_task","dispatch","a","axios","post","push","payload","response","data","createProject","project","AddProject","projectName","description","start_date","end_date","handleChange","submitForm","newProject","nextContext","classname","initialState","projects","project_tasks","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactRedux","window","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","databaseSnapshot","getProject","updateProject","disabled","get","res","ProjectItem","onDeleteClick","deleteProject","deadline","updated","updated_At","width","color","textDecoration","onClick","confirm","delete","CreateProject","Fragment","Dashboard","getProjects","map","key","Task","pt_id","deleteProjectTask","priorityString","priorityClass","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","console","log","ProjectBoard","getBacklog","BoardContent","projectNotFound","role","boardAlgorithm","marginTop","UpdateTask","create_At","getProjectTask","faceDetectionRequest","UpdateProjectTask","updateProjectTask","patch","Landing","App","exact","path","component","DashBoard","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.244b9d33.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass Nav extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark mb-lg-auto\">\n                <Link to=\"/\" className=\"navbar-brand\" style={{fontSize : \"28px\"}}>\n                    Manegizer\n                </Link>\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/db\" className=\"nav-link\">\n                            Project List\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\nexport default Nav;","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {addProjectTask} from \"../actions/backlogActions\";\nimport classnames from 'classnames'\n\nclass AddTask extends Component {\n    constructor(props) {\n        super(props);\n        const { id } = this.props.match.params;\n\n        this.state = {\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: 0,\n            dueDate: \"\",\n            projectIdentifier: id,\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps , dataFormatValue) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    // on change\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    //on submit\n    onSubmit(e) {\n        e.preventDefault();\n\n        const newTask = {\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate\n        };\n        this.props.addProjectTask(\n            this.state.projectIdentifier,\n            newTask,\n            this.props.history\n        );\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { errors } = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container m-5\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/pb/${id}`} className=\"btn btn-light\">\n                                Back to Project\n                            </Link>\n                            <h4 className=\"display-4 text-center\">New Task</h4>\n                            <h6 className=\"text-info text-center\">To project: ({id})</h6>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Task Summary</h5>\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-md\", {\n                                            \"is-invalid\": errors.summary\n                                        })}\n                                        name=\"summary\"\n                                        placeholder=\"Task summary\"\n                                        value={this.state.summary}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Definition of Done - DoD</h5>\n                  <textarea\n                      className=\"form-control form-control-md\"\n                      placeholder=\"Acceptance Criteria\"\n                      name=\"acceptanceCriteria\"\n                      value={this.state.acceptanceCriteria}\n                      onChange={this.onChange}\n                  />\n                                </div>\n                                <h5 className=\"lbl\">Due Date</h5>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-md\"\n                                        name=\"dueDate\"\n                                        value={this.state.dueDate}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Select Priority</h5>\n                                    <select\n                                        className=\"form-control form-control-md\"\n                                        name=\"priority\"\n                                        value={this.state.priority}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                    <div className=\"text-info small\">If not selected, will default to Low</div>\n\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Current Status</h5>\n                                    <select\n                                        className=\"form-control form-control-md\"\n                                        name=\"status\"\n                                        value={this.state.status}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                    <div className=\"text-info small\">If not selected, will default to To Do</div>\n\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-dark btn-block mt-4\"\n                                    value=\"Add Task\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { addProjectTask })(AddTask);","import axios from \"axios\";\nimport {\n    GET_ERRORS,\n    GET_BACKLOG,\n    GET_PROJECT_TASK,\n    DELETE_PROJECT_TASK\n} from \"./types\";\n\n//Fix bug with priority in Spring Boot Server, needs to check null first\nexport const addProjectTask = (\n    backlog_id,\n    project_task,\n    history\n) => async dispatch => {\n    try {\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\n        history.push(`/pb/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const getBacklog = backlog_id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const getProjectTask = (\n    backlog_id,\n    pt_id,\n    history\n) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        });\n    } catch (err) {\n        history.push(\"/db\");\n    }\n};\n\nexport const updateProjectTask = (\n    backlog_id,\n    pt_id,\n    project_task,\n    history\n) => async dispatch => {\n    try {\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n        history.push(`/pb/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n    if (\n        window.confirm(\n            `Are you sure you want to delete task [${pt_id}], this action is permanent`\n        )\n    ) {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        });\n    }\n};\n","export const DELETE_PROJECT = \"DELETE_PROJECT\";\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\n\n\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";","import axios from \"axios\";\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"./types\";\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/project\", project);\n        history.push(\"/db\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const getProjects = () => async dispatch => {\n    const res = await axios.get(\"/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload: res.data\n    });\n};\n\nexport const getProject = (id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/project/${id}`);\n        dispatch({\n            type: GET_PROJECT,\n            payload: res.data\n        });\n    } catch (error) {\n        history.push(\"/db\");\n    }\n};\n\nexport const deleteProject = id => async dispatch => {\n    if (\n        window.confirm(\n            \"Are you sure? This will delete the project and all related tasks. Click 'OK' to delete\"\n        )\n    ) {\n        await axios.delete(`/api/project/${id}`);\n        dispatch({\n            type: DELETE_PROJECT,\n            payload: id\n        });\n    }\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport { createProject} from \"../actions/projectActions\";\nimport classname from 'classnames'\n\nclass AddProject extends Component {\n\n    state={\n        projectName: \"\",\n        projectIdentifier: \"\",\n        description: \"\",\n        start_date : \"\",\n        end_date : \"\",\n        errors : {}\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors){\n            this.setState({\n                errors : nextProps.errors\n            })\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    submitForm = (e) => {\n        e.preventDefault()\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date : this.state.start_date,\n            end_date : this.state.end_date\n        }\n        this.props.createProject(newProject , this.props.history)\n}\n    render() {\n\n        const { errors } = this.state;\n        return (\n\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center p-3\">Create Project</h5>\n                            <hr/>\n                            <form className=\"form-control-lg\" onSubmit={this.submitForm}>\n                                <div className=\"form-group\">\n                                    <h5>Project Name</h5>\n                                    <input type=\"text\"\n                                           className={ classname(\"form-control form-control-lg\"\n                                           , {\"is-invalid\" : errors.projectName})}\n                                           placeholder=\"Project Name\"\n                                           name=\"projectName\"\n                                           value={this.state.projectName}\n                                           onChange={this.handleChange}\n                                    />\n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">\n                                            {errors.projectName}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5>Project ID</h5>\n                                    <input\n                                        type=\"text\"\n                                        className={ classname(\"form-control form-control-lg\"\n                                            , {\"is-invalid\" : errors.projectIdentifier})}\n                                        placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.handleChange}\n                                    />\n                                    {errors.projectIdentifier && (\n                                    <div className=\"invalid-feedback\">\n                                        { errors.projectIdentifier }\n                                </div>\n                                )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5>Project Description</h5>\n                                    <textarea\n                                        className={ classname(\"form-control form-control-lg\"\n                                            , {\"is-invalid\" : errors.description})}                                        placeholder=\"Project Description\"\n                                        name=\"description\"\n                                        value={this.state.description}\n                                        onChange={this.handleChange}\n                                    />\n                                    {errors.description  && (\n                                        <div className=\"invalid-feedback\">\n                                            {  errors.description  }\n                                        </div>\n                                    )}\n\n                                </div>\n                                <h5>Start Date</h5>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                           className=\"form-control form-control-lg\"\n                                           name=\"start_date\"\n                                           value={this.state.start_date}\n                                           onChange={this.handleChange}\n                                    />\n                                </div>\n                                <h5>Estimated Completion Date</h5>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                           className=\"form-control form-control-lg\"\n                                           name=\"end_date\"\n                                           value={this.state.end_date}\n                                           onChange={this.handleChange}\n                                    />\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-dark btn-block\"\n                                    value=\"Create Project\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProject.propTypes = {\n    createProject : PropTypes.func.isRequired,\n    errors : PropTypes.object.isRequired\n}\n\nconst propsToState = state => ({\n    errors : state.errors\n})\nexport default connect(propsToState , {createProject}) (AddProject);","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState , action) {\n    switch (action.type) {\n\n        case GET_ERRORS :\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            };\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n\n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(\n                    project => project.projectIdentifier !== action.payload\n                )\n            };\n        default:\n            return state;\n    }\n}\n","import {\n    GET_BACKLOG,\n    GET_PROJECT_TASK,\n    DELETE_PROJECT_TASK\n} from \"../actions/types\";\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            };\n\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            };\n\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks: state.project_tasks.filter(\n                    project_task => project_task.projectSequence !== action.payload\n                )\n            };\n\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\n\nexport default combineReducers({\n    errors : errorReducer ,\n    project : projectReducer,\n    backlog: backlogReducer\n})","import {createStore , applyMiddleware , compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers'\n\nconst initialState = {};\nconst middleware = [thunk];\n\nlet store;\n\nconst ReactRedux  = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nif ((window.navigator.userAgent.includes(\"Firefox\") || window.navigator.userAgent.includes(\"Chrome\")) && ReactRedux){\n    store = createStore(\n        rootReducer ,\n        initialState ,\n        compose(applyMiddleware(...middleware) ,\n            ReactRedux\n        )\n\n    )\n}\nelse {\n    store = createStore(\n        rootReducer ,\n        initialState ,\n        compose(applyMiddleware(...middleware))\n    )\n}\n\nexport default store;","import React, { Component } from \"react\";\nimport { getProject, createProject } from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n    //set state\n    constructor() {\n        super();\n\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps , databaseSnapshot) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n        const {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        } = nextProps.project;\n\n        this.setState({\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        });\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n\n        this.props.createProject(updateProject, this.props.history);\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-8 mx-auto\">\n                            <h5 className=\"display-4 text-center p-3\">Update Project\n                                <h6>(PID: {this.state.projectIdentifier})</h6>\n                            </h5>\n                            <hr />\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    Project Name\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-md\", {\n                                            \"is-invalid\": errors.projectName\n                                        })}\n                                        placeholder=\"Project Name\"\n                                        name=\"projectName\"\n                                        value={this.state.projectName}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.projectName && (\n                                        <div className=\"\">{errors.projectName}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    Project ID\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control form-control-md\"\n                                        placeholder=\"Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.onChange}\n                                        disabled\n                                    />\n                                    <div className=\"text-info small\">project ID cant be changed</div>\n                                </div>\n                                <div className=\"form-group\">\n                                    Project Description\n                  <textarea\n                      className={classnames(\"form-control form-control-md\", {\n                          \"is-invalid\": errors.description\n                      })}\n                      placeholder=\"Project Description\"\n                      name=\"description\"\n                      value={this.state.description}\n                      onChange={this.onChange}\n                  />\n                                    {errors.description && (\n                                        <div className=\"invalid-feedback\">{errors.description}</div>\n                                    )}\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-md\"\n                                        name=\"start_date\"\n                                        value={this.state.start_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-md\"\n                                        name=\"end_date\"\n                                        value={this.state.end_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-dark btn-block\"\n                                    value=\"Update Project\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { getProject, createProject }\n)(UpdateProject);\n","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteProject} from \"../actions/projectActions\";\n\nclass ProjectItem extends Component {\n    onDeleteClick = id => {\n        this.props.deleteProject(id);\n    };\n\n    render() {\n        const {project} = this.props;\n        let deadline = this.props.project.end_date != null ? this.props.project.end_date : \"Not Provided\"\n        let updated = this.props.project.updated_At != null ? this.props.project.end_date : \"Never updated\"\n        return (\n            <div className=\"container\" style={{width : \"1030px\"}}>\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                        Project ID: {project.projectIdentifier}\n                            <h6 className=\"float-right text-light bg-dark m-1 \">\n                                Deadline: {deadline}\n                            </h6>\n                    </div>\n                    <div className=\" card-body bg-light mb-3\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <div className=\"card-title\">\n                                    <h5><h4 className=\"d-inline\" style={{color : \"#3c72cb\"}}>Project Name:</h4> {project.projectName}</h5>\n                                </div>\n                                <p><p className=\"d-inline\" style={{color : \"#3c72cb\"}}>Description:</p> {project.description}</p>\n                            </div>\n                        <div className=\"col-md-3 d-inline d-lg-block ml-auto\">\n                            <ul className=\"list-group\">\n                                <Link to={`/pb/${project.projectIdentifier}`}\n                                      style={{ textDecoration: 'none' }}\n                                >\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered\"> View Project Tasks </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}\n                                      style={{ textDecoration: 'none' }}\n                                >\n                                    <li className=\"list-group-item btn btn-block\">\n                                        <i className=\"fa fa-edit\">Update Project</i>\n                                    </li>\n                                </Link>\n\n                                <li\n                                    className=\"list-group-item btn btn-block delete\"\n                                    onClick={this.onDeleteClick.bind(\n                                        this,\n                                        project.projectIdentifier\n                                    )}\n                                >\n                                    <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                        <div className=\"card-footer\">\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">Last update: {updated}</small></p>\n                        </div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n};\n\nexport default connect(\n    null,\n    {deleteProject}\n)(ProjectItem);\n","import React from 'react'\nimport {Link} from \"react-router-dom\";\n\nconst CreateProject = () => {\n    return(\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-dark\">\n                New Project\n            </Link>\n        </React.Fragment>\n    )\n}\n\nexport default CreateProject","import React, { Component } from \"react\";\nimport ProjectItem from \"./ProjectItem\";\nimport { connect } from \"react-redux\";\nimport { getProjects } from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport CreateProject from \"./CreateProject\";\n\nclass Dashboard extends Component {\n    componentDidMount() {\n        this.props.getProjects();\n    }\n\n    render() {\n        const { projects } = this.props.project;\n\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"text-lg-center text-center\">Projects List</h1>\n                            <br />\n                            <CreateProject />\n\n                            <br />\n                            <hr />\n                            {projects.map(project => (\n                                <div>\n                                    <ProjectItem key={project.id} project={project} />\n                                    <br />\n                                </div>\n\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project\n});\n\nexport default connect(\n    mapStateToProps,\n    { getProjects }\n)(Dashboard);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types'\nimport { deleteProjectTask } from \"../actions/backlogActions\";\n\n\nclass Task extends Component {\n    onDeleteClick(backlog_id, pt_id) {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n    render() {\n        const { project_task } = this.props;\n        let priorityString;\n        let priorityClass;\n\n        if (project_task.priority === 1) {\n            priorityClass = \"bg-light text-danger\";\n            priorityString = \"HIGH\";\n        }\n\n        if (project_task.priority === 2) {\n            priorityClass = \"bg-light text-warning\";\n            priorityString = \"MEDIUM\";\n        }\n\n        if (project_task.priority === 3) {\n            priorityClass = \"bg-light text-info\";\n            priorityString = \"LOW\";\n        }\n\n        let deadline = project_task.dueDate != null ? project_task.dueDate : \"Not Provided\"\n        return (\n            <div className=\"card mb-3\">\n                <div className={`card-header text-primary ${priorityClass}`}>\n                    <h6 className=\"font-weight-bold\">\n                        TID: {project_task.projectSequence}\n                        <h6 className=\"d-inline float-right font-weight-bold\">Priority: {priorityString}</h6>\n                    </h6>\n                </div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link\n                        to={`/updateTask/${project_task.projectIdentifier}/${\n                            project_task.projectSequence\n                        }`}\n                        className=\"btn btn-secondary\"\n                    >\n                        View / Update\n                    </Link>\n\n                    <button\n                        className=\"btn btn-danger ml-4\"\n                        onClick={this.onDeleteClick.bind(\n                            this,\n                            project_task.projectIdentifier,\n                            project_task.projectSequence\n                        )}\n                    >\n                        Delete\n                    </button>\n                </div>\n                <div className=\"card-footer bg-light text-black-50\">\n                    <h6 style={{fontSize : \"14px\"}}>Due on: {deadline} </h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n};\nexport default connect(\n    null,\n    { deleteProjectTask }\n)(Task);\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\n\nclass Backlog extends Component {\n    render() {\n        const { project_tasks_prop } = this.props;\n\n        const tasks = project_tasks_prop.map(project_task => (\n            <Task key={project_task.id} project_task={project_task} />\n        ));\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for (let i = 0; i < tasks.length; i++) {\n            console.log(tasks[i]);\n\n            if (tasks[i].props.project_task.status === \"TO_DO\") {\n                todoItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\n                inProgressItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"DONE\") {\n                doneItems.push(tasks[i]);\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-warning text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n                        {todoItems}\n                        {\n                            // insert tasks here\n                        }\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-info text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n                        {inProgressItems}\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-success text-white\">\n                                <h3>Completed</h3>\n                            </div>\n                        </div>\n                        {doneItems}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Backlog;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Backlog from \"./Backlog\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n    //constructor to handle errors\n    constructor() {\n        super();\n        this.state = {\n            errors: {}\n        };\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps , dataFormatValue) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { project_tasks } = this.props.backlog;\n        const { errors } = this.state;\n\n        let BoardContent;\n\n        const boardAlgorithm = (errors, project_tasks) => {\n            if (project_tasks.length < 1) {\n                if (errors.projectNotFound) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectNotFound}\n                        </div>\n                    );\n                } else {\n                    return (\n                        <div>\n                            <div className=\"alert alert-info text-center\" role=\"alert\">\n                                {//Todo: change message here to include link in the message\n                                }\n                                You haven't created any task on this project\n                                <br/>\n                            </div>\n                            <Link to={`/addTask/${id}`} className=\"btn text-lg-center btn-block bg-light\">\n                                Add Task\n                            </Link>\n                        </div>\n                    );\n                }\n            } else {\n                return <Backlog project_tasks_prop={project_tasks} />;\n            }\n        };\n\n        BoardContent = boardAlgorithm(errors, project_tasks);\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addTask/${id}`} className=\"btn btn-primary\"style={{marginTop:\"12px\"}}>\n                    <i className=\"fa fa-plus-circle\" > Add New Task </i>\n                </Link>\n                <br />\n                <hr />\n                {BoardContent}\n            </div>\n        );\n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { getBacklog }\n)(ProjectBoard);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { getProjectTask, updateProjectTask } from \"../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\nclass UpdateTask extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        const { backlog_id, pt_id } = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps , faceDetectionRequest) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n\n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        } = nextProps.project_task;\n\n        this.setState({\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        });\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const UpdateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At\n        };\n\n        // console.log(UpdateProjectTask);\n        this.props.updateProjectTask(\n            this.state.projectIdentifier,\n            this.state.projectSequence,\n            UpdateProjectTask,\n            this.props.history\n        );\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container m-5\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link\n                                to={`/pb/${this.state.projectIdentifier}`}\n                                className=\"btn btn-light\"\n                            >\n                                Back to Projects\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Update Task</h4>\n                            <p className=\"lead text-center\">\n                                PID: {this.state.projectIdentifier} | TID:{\" \"}\n                                {this.state.projectSequence}{\" \"}\n                            </p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Project Name</h5>\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-md\", {\n                                            \"is-invalid\": errors.summary\n                                        })}\n                                        name=\"summary\"\n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">DoD</h5>\n                  <textarea\n                      className=\"form-control form-control-md\"\n                      placeholder=\"Acceptance Criteria\"\n                      name=\"acceptanceCriteria\"\n                      value={this.state.acceptanceCriteria}\n                      onChange={this.onChange}\n                  />\n                                </div>\n                                <h5 className=\"lbl\">Due Date</h5>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-md\"\n                                        name=\"dueDate\"\n                                        value={this.state.dueDate}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Priority</h5>\n                                    <select\n                                        className=\"form-control form-control-md\"\n                                        name=\"priority\"\n                                        value={this.state.priority}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <h5 className=\"lbl\">Status</h5>\n                                    <select\n                                        className=\"form-control form-control-md\"\n                                        name=\"status\"\n                                        value={this.state.status}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-dark btn-block mt-4\"\n                                    value=\"Update Task\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    updateProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { getProjectTask, updateProjectTask }\n)(UpdateTask);\n","import React , {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass Landing extends Component {\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">\n                                    Manegizer\n                                </h1>\n                                <p className=\"lead\">\n                                    Write something here so it gets more sound\n                                </p>\n                                <hr />\n                                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/db\">\n                                    View Projects\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Landing;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport AddTask from \"./components/AddTask\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport AddProject from \"./components/AddProject\";\nimport {Provider} from 'react-redux'\nimport store from \"./store\";\nimport UpdateProject from \"./components/UpdateProject\";\nimport DashBoard from \"./components/DashBoard\";\nimport ProjectBoard from \"./components/ProjectBoard\";\nimport UpdateTask from \"./components/UpdateTask\";\nimport Landing from \"./components/Landing\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <HashRouter>\n                    <div>\n                        <Nav />\n                        <Route exact path=\"/\" component={Landing} />\n                        <Route exact path=\"/db\" component={DashBoard} />\n                        <Route exact path=\"/addProject\" component={AddProject} />\n                        <Route exact path=\"/updateProject/:id\" component={UpdateProject} />\n                        <Route exact path=\"/pb/:id\" component={ProjectBoard} />\n                        <Route\n                            exact\n                            path=\"/addTask/:id\"\n                            component={AddTask}\n                        />\n                        <Route\n                            exact\n                            path=\"/updateTask/:backlog_id/:pt_id\"\n                            component={UpdateTask}\n                        />\n                    </div>\n                </HashRouter>\n            </Provider>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}